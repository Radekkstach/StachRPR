<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="timer1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>